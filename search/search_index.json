{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"template/","title":"Template","text":"<p>Note</p> <p>Click the problem's title below to get redirected to the problem's page.</p>"},{"location":"template/#contains-duplicate","title":"Contains Duplicate","text":"<p>problem description.</p>"},{"location":"template/#thought-processexplanation","title":"Thought Process/Explanation","text":"<p>bla bla bla</p>"},{"location":"template/#solution","title":"Solution","text":"Bubble Sort<pre><code>def bubble_sort(items):\nfor i in range(len(items)): # (1)\nfor j in range(len(items) - 1 - i):\nif items[j] &gt; items[j + 1]:\nitems[j], items[j + 1] = items[j + 1], items[j]\n</code></pre> <ol> <li>testing!</li> </ol> <p>Testing syntax highlighting in inline code: <code>import torch</code></p>"},{"location":"arrays_and_hashing/contains_duplicate/","title":"Contains duplicate","text":"<p>Note</p> <p>Click the problem's title below to get redirected to the problem's page.</p>"},{"location":"arrays_and_hashing/contains_duplicate/#contains-duplicate","title":"Contains Duplicate","text":"<p>problem description.</p>"},{"location":"arrays_and_hashing/contains_duplicate/#thought-processexplanation","title":"Thought Process/Explanation","text":"<p>bla bla bla</p>"},{"location":"arrays_and_hashing/contains_duplicate/#solution","title":"Solution","text":"solutions/arrays_and_hashing/contains_duplicate.py<pre><code>def containsDuplicate(self, nums: List[int]) -&gt; bool:\ndata = set()\nfor num in nums:\nif num in data:\nreturn True\ndata.add(num)\nreturn False\n</code></pre> solutions/arrays_and_hashing/contains_duplicate.cpp<pre><code>def containsDuplicate(self, nums: List[int]) -&gt; bool:\ndata = set()\nfor num in nums:\nif num in data:\nreturn True\ndata.add(num)\nreturn False\n</code></pre> solutions/arrays_and_hashing/contains_duplicate.c<pre><code>def containsDuplicate(self, nums: List[int]) -&gt; bool:\ndata = set()\nfor num in nums:\nif num in data:\nreturn True\ndata.add(num)\nreturn False\n</code></pre>"}]}